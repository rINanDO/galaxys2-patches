From ffea599cb59e773b8a8b28bf453d2ea99428adc1 Mon Sep 17 00:00:00 2001
From: Dominggoes Isakh <drjisakh@gmail.com>
Date: Wed, 12 Oct 2022 12:01:09 +0200
Subject: [PATCH] BpfMap: Don't abort() when eBPF is not available

Change-Id: Id50f3d16249847ecf2e65e8c3ab44a67fcc61d90
---
 common/native/bpf_headers/include/bpf/BpfMap.h | 33 ++++++++++++++++----------
 1 file changed, 21 insertions(+), 12 deletions(-)

diff --git a/common/native/bpf_headers/include/bpf/BpfMap.h b/common/native/bpf_headers/include/bpf/BpfMap.h
index 2bee2ee..124bf61 100644
--- a/common/native/bpf_headers/include/bpf/BpfMap.h
+++ b/common/native/bpf_headers/include/bpf/BpfMap.h
@@ -22,6 +22,7 @@
 #include <android-base/stringprintf.h>
 #include <android-base/unique_fd.h>
 #include <utils/Log.h>
+#include <sys/system_properties.h>
 #include "bpf/BpfUtils.h"
 
 namespace android {
@@ -47,13 +48,18 @@ class BpfMap {
     BpfMap<Key, Value>() {};
 
   protected:
+    char ebpf_supported[PROP_VALUE_MAX] = "";
+    bool USE_EBPF = __system_property_get("ro.kernel.ebpf.supported", ebpf_supported) == 0 || strcmp(ebpf_supported, "false");
+
     // flag must be within BPF_OBJ_FLAG_MASK, ie. 0, BPF_F_RDONLY, BPF_F_WRONLY
     BpfMap<Key, Value>(const char* pathname, uint32_t flags) {
         mMapFd.reset(mapRetrieve(pathname, flags));
-        if (mMapFd < 0) abort();
-        if (isAtLeastKernelVersion(4, 14, 0)) {
-            if (bpfGetFdKeySize(mMapFd) != sizeof(Key)) abort();
-            if (bpfGetFdValueSize(mMapFd) != sizeof(Value)) abort();
+        if (USE_EBPF) {
+            if (mMapFd < 0) abort();
+            if (isAtLeastKernelVersion(4, 14, 0)) {
+                if (bpfGetFdKeySize(mMapFd) != sizeof(Key)) abort();
+                if (bpfGetFdValueSize(mMapFd) != sizeof(Value)) abort();
+            }
         }
     }
 
@@ -62,7 +68,8 @@ class BpfMap {
 
     BpfMap<Key, Value>(bpf_map_type map_type, uint32_t max_entries, uint32_t map_flags = 0) {
         mMapFd.reset(createMap(map_type, sizeof(Key), sizeof(Value), max_entries, map_flags));
-        if (mMapFd < 0) abort();
+        if (USE_EBPF)
+            if (mMapFd < 0) abort();
     }
 
     base::Result<Key> getFirstKey() const {
@@ -109,13 +116,15 @@ class BpfMap {
         if (mMapFd == -1) {
             return ErrnoErrorf("Pinned map not accessible or does not exist: ({})", path);
         }
-        if (isAtLeastKernelVersion(4, 14, 0)) {
-            // Normally we should return an error here instead of calling abort,
-            // but this cannot happen at runtime without a massive code bug (K/V type mismatch)
-            // and as such it's better to just blow the system up and let the developer fix it.
-            // Crashes are much more likely to be noticed than logs and missing functionality.
-            if (bpfGetFdKeySize(mMapFd) != sizeof(Key)) abort();
-            if (bpfGetFdValueSize(mMapFd) != sizeof(Value)) abort();
+        if (USE_EBPF) {
+          if (isAtLeastKernelVersion(4, 14, 0)) {
+              // Normally we should return an error here instead of calling abort,
+              // but this cannot happen at runtime without a massive code bug (K/V type mismatch)
+              // and as such it's better to just blow the system up and let the developer fix it.
+              // Crashes are much more likely to be noticed than logs and missing functionality.
+              if (bpfGetFdKeySize(mMapFd) != sizeof(Key)) abort();
+              if (bpfGetFdValueSize(mMapFd) != sizeof(Value)) abort();
+            }
         }
         return {};
     }
-- 
2.7.4

