From 377f16fe92ba173e65633aa4e94757c3a10d5ce9 Mon Sep 17 00:00:00 2001
From: Dominggoes Isakh <drjisakh@gmail.com>
Date: Sat, 15 Oct 2022 10:51:17 +0200
Subject: [PATCH 3/3] NetworkStatsService: Prevent crashes when eBPF is not
 supported

Change-Id: Iec074ab985a1b413711ea13ea20382499cfaa663
---
 service-t/src/com/android/server/net/NetworkStatsService.java | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/service-t/src/com/android/server/net/NetworkStatsService.java b/service-t/src/com/android/server/net/NetworkStatsService.java
index 4f0f341..79e7f17 100644
--- a/service-t/src/com/android/server/net/NetworkStatsService.java
+++ b/service-t/src/com/android/server/net/NetworkStatsService.java
@@ -122,6 +122,7 @@ import android.os.PowerManager;
 import android.os.RemoteException;
 import android.os.ServiceSpecificException;
 import android.os.SystemClock;
+import android.os.SystemProperties;
 import android.os.Trace;
 import android.os.UserHandle;
 import android.provider.DeviceConfig;
@@ -196,6 +197,8 @@ public class NetworkStatsService extends INetworkStatsService.Stub {
     static final boolean LOGD = Log.isLoggable(TAG, Log.DEBUG);
     static final boolean LOGV = Log.isLoggable(TAG, Log.VERBOSE);
 
+    private static final boolean USE_EBPF = SystemProperties.getBoolean("ro.kernel.ebpf.supported", true);
+
     // Perform polling and persist all (FLAG_PERSIST_ALL).
     private static final int MSG_PERFORM_POLL = 1;
     // Perform polling, persist network, and register the global alert again.
@@ -2198,6 +2201,9 @@ public class NetworkStatsService extends INetworkStatsService.Stub {
 
     @GuardedBy("mStatsLock")
     private void recordSnapshotLocked(long currentTime) throws RemoteException {
+        if (!USE_EBPF)
+            return;
+
         // snapshot and record current counters; read UID stats first to
         // avoid over counting dev stats.
         Trace.traceBegin(TRACE_TAG_NETWORK, "snapshotUid");
@@ -2402,6 +2408,8 @@ public class NetworkStatsService extends INetworkStatsService.Stub {
     private <K extends StatsMapKey, V extends StatsMapValue> void deleteStatsMapTagData(
             IBpfMap<K, V> statsMap, int uid) {
         try {
+            if (!USE_EBPF) return;
+
             statsMap.forEach((key, value) -> {
                 if (key.uid == uid) {
                     try {
@@ -2421,6 +2429,8 @@ public class NetworkStatsService extends INetworkStatsService.Stub {
      * @param uid
      */
     private void deleteKernelTagData(int uid) {
+        if (!USE_EBPF) return;
+
         try {
             mCookieTagMap.forEach((key, value) -> {
                 // If SkDestroyListener deletes the socket tag while this code is running,
@@ -2440,7 +2450,6 @@ public class NetworkStatsService extends INetworkStatsService.Stub {
         } catch (ErrnoException e) {
             Log.e(TAG, "Failed to delete tag data from cookie tag map", e);
         }
-
         deleteStatsMapTagData(mStatsMapA, uid);
         deleteStatsMapTagData(mStatsMapB, uid);
 
-- 
2.7.4

