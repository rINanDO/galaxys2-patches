From 67bfc3a8ffaa7a12eff8635905c7da447e2ba31b Mon Sep 17 00:00:00 2001
From: Dominggoes Isakh <drjisakh@gmail.com>
Date: Thu, 26 Oct 2023 21:35:11 +0200
Subject: [PATCH 3/3] Revert "Add a timeout for all installd operations."

This reverts commit 495142ac75cdb2595a61755d7ab42a748e651728.

Change-Id: I5037e8aae3c03330d287c14316d0d562c12e40f7
---
 cmds/installd/dexopt.cpp                     | 112 +++++++------------
 cmds/installd/tests/installd_dexopt_test.cpp |   6 +-
 cmds/installd/tests/installd_utils_test.cpp  |  42 -------
 cmds/installd/utils.cpp                      |  78 ++++---------
 cmds/installd/utils.h                        |   7 +-
 cmds/installd/view_compiler.cpp              |  20 +---
 6 files changed, 67 insertions(+), 198 deletions(-)

diff --git a/cmds/installd/dexopt.cpp b/cmds/installd/dexopt.cpp
index ebb78913b1..a807dd1623 100644
--- a/cmds/installd/dexopt.cpp
+++ b/cmds/installd/dexopt.cpp
@@ -74,19 +74,10 @@ using android::base::ReadFdToString;
 using android::base::ReadFully;
 using android::base::StringPrintf;
 using android::base::WriteFully;
-using android::base::borrowed_fd;
 using android::base::unique_fd;
 
 namespace {
 
-// Timeout for short operations, such as merging profiles.
-constexpr int kShortTimeoutMs = 60000; // 1 minute.
-
-// Timeout for long operations, such as compilation. This should be smaller than the Package Manager
-// watchdog (PackageManagerService.WATCHDOG_TIMEOUT, 10 minutes), so that the operation will be
-// aborted before that watchdog would take down the system server.
-constexpr int kLongTimeoutMs = 570000; // 9.5 minutes.
-
 class DexOptStatus {
  public:
     // Check if dexopt is cancelled and fork if it is not cancelled.
@@ -495,25 +486,6 @@ static void open_profile_files(uid_t uid, const std::string& package_name,
     }
 }
 
-// Cleans up an output file specified by a file descriptor. This function should be called whenever
-// a subprocess that modifies a system-managed file crashes.
-// If the subprocess crashes while it's writing to the file, the file is likely corrupted, so we
-// should remove it.
-// If the subprocess times out and is killed while it's acquiring a flock on the file, there is
-// probably a deadlock, so it's also good to remove the file so that later operations won't
-// encounter the same problem. It's safe to do so because the process that is holding the flock will
-// still have access to the file until the file descriptor is closed.
-// Note that we can't do `clear_reference_profile` here even if the fd points to a reference profile
-// because that also requires a flock and is therefore likely to be stuck in the second case.
-static bool cleanup_output_fd(int fd) {
-    std::string path;
-    bool ret = remove_file_at_fd(fd, &path);
-    if (ret) {
-        LOG(INFO) << "Removed file at path " << path;
-    }
-    return ret;
-}
-
 static constexpr int PROFMAN_BIN_RETURN_CODE_SUCCESS = 0;
 static constexpr int PROFMAN_BIN_RETURN_CODE_COMPILE = 1;
 static constexpr int PROFMAN_BIN_RETURN_CODE_SKIP_COMPILATION_NOT_ENOUGH_DELTA = 2;
@@ -525,14 +497,13 @@ static constexpr int PROFMAN_BIN_RETURN_CODE_SKIP_COMPILATION_EMPTY_PROFILES = 7
 
 class RunProfman : public ExecVHelper {
   public:
-    template <typename T, typename U>
-    void SetupArgs(const std::vector<T>& profile_fds,
-                   const unique_fd& reference_profile_fd,
-                   const std::vector<U>& apk_fds,
-                   const std::vector<std::string>& dex_locations,
-                   bool copy_and_update,
-                   bool for_snapshot,
-                   bool for_boot_image) {
+   void SetupArgs(const std::vector<unique_fd>& profile_fds,
+                  const unique_fd& reference_profile_fd,
+                  const std::vector<unique_fd>& apk_fds,
+                  const std::vector<std::string>& dex_locations,
+                  bool copy_and_update,
+                  bool for_snapshot,
+                  bool for_boot_image) {
 
         // TODO(calin): Assume for now we run in the bg compile job (which is in
         // most of the invocation). With the current data flow, is not very easy or
@@ -548,11 +519,11 @@ class RunProfman : public ExecVHelper {
             AddArg("--reference-profile-file-fd=" + std::to_string(reference_profile_fd.get()));
         }
 
-        for (const T& fd : profile_fds) {
+        for (const unique_fd& fd : profile_fds) {
             AddArg("--profile-file-fd=" + std::to_string(fd.get()));
         }
 
-        for (const U& fd : apk_fds) {
+        for (const unique_fd& fd : apk_fds) {
             AddArg("--apk-fd=" + std::to_string(fd.get()));
         }
 
@@ -611,14 +582,20 @@ class RunProfman : public ExecVHelper {
                   for_boot_image);
     }
 
-    void SetupCopyAndUpdate(const unique_fd& profile_fd,
-                            const unique_fd& reference_profile_fd,
-                            const unique_fd& apk_fd,
+    void SetupCopyAndUpdate(unique_fd&& profile_fd,
+                            unique_fd&& reference_profile_fd,
+                            unique_fd&& apk_fd,
                             const std::string& dex_location) {
-        SetupArgs(std::vector<borrowed_fd>{profile_fd},
-                  reference_profile_fd,
-                  std::vector<borrowed_fd>{apk_fd},
-                  {dex_location},
+        // The fds need to stay open longer than the scope of the function, so put them into a local
+        // variable vector.
+        profiles_fd_.push_back(std::move(profile_fd));
+        apk_fds_.push_back(std::move(apk_fd));
+        reference_profile_fd_ = std::move(reference_profile_fd);
+        std::vector<std::string> dex_locations = {dex_location};
+        SetupArgs(profiles_fd_,
+                  reference_profile_fd_,
+                  apk_fds_,
+                  dex_locations,
                   /*copy_and_update=*/true,
                   /*for_snapshot*/false,
                   /*for_boot_image*/false);
@@ -647,6 +624,11 @@ class RunProfman : public ExecVHelper {
     void Exec() {
         ExecVHelper::Exec(DexoptReturnCodes::kProfmanExec);
     }
+
+  private:
+    unique_fd reference_profile_fd_;
+    std::vector<unique_fd> profiles_fd_;
+    std::vector<unique_fd> apk_fds_;
 };
 
 static int analyze_profiles(uid_t uid, const std::string& package_name,
@@ -678,14 +660,13 @@ static int analyze_profiles(uid_t uid, const std::string& package_name,
         profman_merge.Exec();
     }
     /* parent */
-    int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
+    int return_code = wait_child(pid);
     bool need_to_compile = false;
     bool empty_profiles = false;
     bool should_clear_current_profiles = false;
     bool should_clear_reference_profile = false;
     if (!WIFEXITED(return_code)) {
         LOG(WARNING) << "profman failed for location " << location << ": " << return_code;
-        cleanup_output_fd(reference_profile_fd.get());
     } else {
         return_code = WEXITSTATUS(return_code);
         switch (return_code) {
@@ -820,10 +801,10 @@ bool dump_profiles(int32_t uid, const std::string& pkgname, const std::string& p
         profman_dump.Exec();
     }
     /* parent */
-    int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
+    int return_code = wait_child(pid);
     if (!WIFEXITED(return_code)) {
-        LOG(WARNING) << "profman failed for package " << pkgname << ": " << return_code;
-        cleanup_output_fd(output_fd.get());
+        LOG(WARNING) << "profman failed for package " << pkgname << ": "
+                << return_code;
         return false;
     }
     return true;
@@ -894,11 +875,7 @@ bool copy_system_profile(const std::string& system_profile,
         _exit(0);
     }
     /* parent */
-    int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
-    if (!WIFEXITED(return_code)) {
-        cleanup_output_fd(out_fd.get());
-        return false;
-    }
+    int return_code = wait_child(pid);
     return return_code == 0;
 }
 
@@ -1548,7 +1525,7 @@ static bool get_class_loader_context_dex_paths(const char* class_loader_context,
     }
     pipe_read.reset();
 
-    int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
+    int return_code = wait_child(pid);
     if (!WIFEXITED(return_code)) {
         PLOG(ERROR) << "Error waiting for child dexoptanalyzer process";
         return false;
@@ -1722,7 +1699,7 @@ static SecondaryDexOptProcessResult process_secondary_dex_dexopt(const std::stri
     }
 
     /* parent */
-    int result = wait_child_with_timeout(pid, kShortTimeoutMs);
+    int result = wait_child(pid);
     cancelled = dexopt_status_->check_if_killed_and_remove_dexopt_pid(pid);
     if (!WIFEXITED(result)) {
         if ((WTERMSIG(result) == SIGKILL) && cancelled) {
@@ -1981,7 +1958,7 @@ int dexopt(const char* dex_path, uid_t uid, const char* pkgname, const char* ins
 
         runner.Exec(DexoptReturnCodes::kDex2oatExec);
     } else {
-        int res = wait_child_with_timeout(pid, kLongTimeoutMs);
+        int res = wait_child(pid);
         bool cancelled = dexopt_status_->check_if_killed_and_remove_dexopt_pid(pid);
         if (res == 0) {
             LOG(VERBOSE) << "DexInv: --- END '" << dex_path << "' (success) ---";
@@ -2170,7 +2147,7 @@ bool reconcile_secondary_dex_file(const std::string& dex_path,
         _exit(result ? kReconcileSecondaryDexCleanedUp : kReconcileSecondaryDexAccessIOError);
     }
 
-    int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
+    int return_code = wait_child(pid);
     if (!WIFEXITED(return_code)) {
         LOG(WARNING) << "reconcile dex failed for location " << dex_path << ": " << return_code;
     } else {
@@ -2288,7 +2265,7 @@ bool hash_secondary_dex_file(const std::string& dex_path, const std::string& pkg
     if (!ReadFully(pipe_read, out_secondary_dex_hash->data(), out_secondary_dex_hash->size())) {
         out_secondary_dex_hash->clear();
     }
-    return wait_child_with_timeout(pid, kShortTimeoutMs) == 0;
+    return wait_child(pid) == 0;
 }
 
 // Helper for move_ab, so that we can have common failure-case cleanup.
@@ -2618,10 +2595,9 @@ static bool create_app_profile_snapshot(int32_t app_id,
     }
 
     /* parent */
-    int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
+    int return_code = wait_child(pid);
     if (!WIFEXITED(return_code)) {
         LOG(WARNING) << "profman failed for " << package_name << ":" << profile_name;
-        cleanup_output_fd(snapshot_fd.get());
         return false;
     }
 
@@ -2728,11 +2704,10 @@ static bool create_boot_image_profile_snapshot(const std::string& package_name,
         }
 
         /* parent */
-        int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
+        int return_code = wait_child(pid);
 
         if (!WIFEXITED(return_code)) {
             PLOG(WARNING) << "profman failed for " << package_name << ":" << profile_name;
-            cleanup_output_fd(snapshot_fd.get());
             return false;
         }
 
@@ -2814,9 +2789,9 @@ bool prepare_app_profile(const std::string& package_name,
     }
 
     RunProfman args;
-    args.SetupCopyAndUpdate(dex_metadata_fd,
-                            ref_profile_fd,
-                            apk_fd,
+    args.SetupCopyAndUpdate(std::move(dex_metadata_fd),
+                            std::move(ref_profile_fd),
+                            std::move(apk_fd),
                             code_path);
     pid_t pid = fork();
     if (pid == 0) {
@@ -2829,10 +2804,9 @@ bool prepare_app_profile(const std::string& package_name,
     }
 
     /* parent */
-    int return_code = wait_child_with_timeout(pid, kShortTimeoutMs);
+    int return_code = wait_child(pid);
     if (!WIFEXITED(return_code)) {
         PLOG(WARNING) << "profman failed for " << package_name << ":" << profile_name;
-        cleanup_output_fd(ref_profile_fd.get());
         return false;
     }
     return true;
diff --git a/cmds/installd/tests/installd_dexopt_test.cpp b/cmds/installd/tests/installd_dexopt_test.cpp
index 4eb30e2542..9c154e8308 100644
--- a/cmds/installd/tests/installd_dexopt_test.cpp
+++ b/cmds/installd/tests/installd_dexopt_test.cpp
@@ -50,8 +50,6 @@ using android::base::unique_fd;
 namespace android {
 namespace installd {
 
-constexpr int kTimeoutMs = 60000;
-
 // TODO(calin): try to dedup this code.
 #if defined(__arm__)
 static const std::string kRuntimeIsa = "arm";
@@ -1115,7 +1113,7 @@ class ProfileTest : public DexoptTest {
             _exit(0);
         }
         /* parent */
-        ASSERT_TRUE(WIFEXITED(wait_child_with_timeout(pid, kTimeoutMs)));
+        ASSERT_TRUE(WIFEXITED(wait_child(pid)));
     }
 
     void mergePackageProfiles(const std::string& package_name,
@@ -1456,7 +1454,7 @@ class BootProfileTest : public ProfileTest {
             _exit(0);
         }
         /* parent */
-        ASSERT_TRUE(WIFEXITED(wait_child_with_timeout(pid, kTimeoutMs)));
+        ASSERT_TRUE(WIFEXITED(wait_child(pid)));
     }
   protected:
     std::string intial_android_profiles_dir;
diff --git a/cmds/installd/tests/installd_utils_test.cpp b/cmds/installd/tests/installd_utils_test.cpp
index 910cd630f3..db76095eba 100644
--- a/cmds/installd/tests/installd_utils_test.cpp
+++ b/cmds/installd/tests/installd_utils_test.cpp
@@ -14,10 +14,8 @@
  * limitations under the License.
  */
 
-#include <errno.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
 
 #include <android-base/logging.h>
 #include <android-base/scopeguard.h>
@@ -714,45 +712,5 @@ TEST_F(UtilsTest, TestSdkSandboxDataPaths) {
               create_data_misc_sdk_sandbox_sdk_path(nullptr, false, 10, "com.foo", "bar@random"));
 }
 
-TEST_F(UtilsTest, WaitChild) {
-    pid_t pid = fork();
-    if (pid == 0) {
-        /* child */
-        // Do nothing.
-        _exit(0);
-    }
-    /* parent */
-    int return_code = wait_child_with_timeout(pid, /*timeout_ms=*/100);
-    EXPECT_TRUE(WIFEXITED(return_code));
-    EXPECT_EQ(WEXITSTATUS(return_code), 0);
-}
-
-TEST_F(UtilsTest, WaitChildTimeout) {
-    pid_t pid = fork();
-    if (pid == 0) {
-        /* child */
-        sleep(1);
-        _exit(0);
-    }
-    /* parent */
-    int return_code = wait_child_with_timeout(pid, /*timeout_ms=*/1);
-    EXPECT_FALSE(WIFEXITED(return_code));
-    EXPECT_EQ(WTERMSIG(return_code), SIGKILL);
-}
-
-TEST_F(UtilsTest, RemoveFileAtFd) {
-    std::string filename = "/data/local/tmp/tempfile-XXXXXX";
-    int fd = mkstemp(filename.data());
-    ASSERT_GE(fd, 0);
-    ASSERT_EQ(access(filename.c_str(), F_OK), 0);
-
-    std::string actual_filename;
-    remove_file_at_fd(fd, &actual_filename);
-    EXPECT_NE(access(filename.c_str(), F_OK), 0);
-    EXPECT_EQ(filename, actual_filename);
-
-    close(fd);
-}
-
 }  // namespace installd
 }  // namespace android
diff --git a/cmds/installd/utils.cpp b/cmds/installd/utils.cpp
index 4d9b71016e..ca7048dcb7 100644
--- a/cmds/installd/utils.cpp
+++ b/cmds/installd/utils.cpp
@@ -19,21 +19,18 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <fts.h>
-#include <poll.h>
 #include <stdlib.h>
 #include <sys/capability.h>
-#include <sys/pidfd.h>
 #include <sys/stat.h>
 #include <sys/statvfs.h>
 #include <sys/wait.h>
 #include <sys/xattr.h>
-#include <unistd.h>
 #include <uuid/uuid.h>
 
 #include <android-base/file.h>
 #include <android-base/logging.h>
-#include <android-base/stringprintf.h>
 #include <android-base/strings.h>
+#include <android-base/stringprintf.h>
 #include <android-base/unique_fd.h>
 #include <cutils/fs.h>
 #include <cutils/properties.h>
@@ -1169,45 +1166,30 @@ int ensure_config_user_dirs(userid_t userid) {
     return fs_prepare_dir(path.c_str(), 0750, uid, gid);
 }
 
-static int wait_child(pid_t pid) {
+int wait_child(pid_t pid)
+{
     int status;
-    pid_t got_pid = TEMP_FAILURE_RETRY(waitpid(pid, &status, /*options=*/0));
+    pid_t got_pid;
 
-    if (got_pid != pid) {
-        PLOG(ERROR) << "waitpid failed: wanted " << pid << ", got " << got_pid;
-        return W_EXITCODE(/*exit_code=*/255, /*signal_number=*/0);
+    while (1) {
+        got_pid = waitpid(pid, &status, 0);
+        if (got_pid == -1 && errno == EINTR) {
+            printf("waitpid interrupted, retrying\n");
+        } else {
+            break;
+        }
     }
-
-    return status;
-}
-
-int wait_child_with_timeout(pid_t pid, int timeout_ms) {
-    int pidfd = pidfd_open(pid, /*flags=*/0);
-    if (pidfd < 0) {
-        PLOG(ERROR) << "pidfd_open failed for pid " << pid
-                    << ", waiting for child process without timeout";
-        return wait_child(pid);
+    if (got_pid != pid) {
+        ALOGW("waitpid failed: wanted %d, got %d: %s\n",
+            (int) pid, (int) got_pid, strerror(errno));
+        return 1;
     }
 
-    struct pollfd pfd;
-    pfd.fd = pidfd;
-    pfd.events = POLLIN;
-    int poll_ret = TEMP_FAILURE_RETRY(poll(&pfd, /*nfds=*/1, timeout_ms));
-
-    close(pidfd);
-
-    if (poll_ret < 0) {
-        PLOG(ERROR) << "poll failed for pid " << pid;
-        kill(pid, SIGKILL);
-        return wait_child(pid);
-    }
-    if (poll_ret == 0) {
-        LOG(WARNING) << "Child process " << pid << " timed out after " << timeout_ms
-                     << "ms. Killing it";
-        kill(pid, SIGKILL);
-        return wait_child(pid);
+    if (WIFEXITED(status) && WEXITSTATUS(status) == 0) {
+        return 0;
+    } else {
+        return status;      /* always nonzero */
     }
-    return wait_child(pid);
 }
 
 /**
@@ -1420,27 +1402,5 @@ void drop_capabilities(uid_t uid) {
     }
 }
 
-bool remove_file_at_fd(int fd, /*out*/ std::string* path) {
-    char path_buffer[PATH_MAX + 1];
-    std::string proc_path = android::base::StringPrintf("/proc/self/fd/%d", fd);
-    ssize_t len = readlink(proc_path.c_str(), path_buffer, PATH_MAX);
-    if (len < 0) {
-        PLOG(WARNING) << "Could not remove file at fd " << fd << ": Failed to get file path";
-        return false;
-    }
-    path_buffer[len] = '\0';
-    if (path != nullptr) {
-        *path = path_buffer;
-    }
-    if (unlink(path_buffer) != 0) {
-        if (errno == ENOENT) {
-            return true;
-        }
-        PLOG(WARNING) << "Could not remove file at path " << path_buffer;
-        return false;
-    }
-    return true;
-}
-
 }  // namespace installd
 }  // namespace android
diff --git a/cmds/installd/utils.h b/cmds/installd/utils.h
index ecea1d2b1c..c73041aaf3 100644
--- a/cmds/installd/utils.h
+++ b/cmds/installd/utils.h
@@ -164,8 +164,7 @@ int validate_apk_path_subdirs(const char *path);
 
 int ensure_config_user_dirs(userid_t userid);
 
-// Waits for a child process, or kills it if it times out. Returns the exit code.
-int wait_child_with_timeout(pid_t pid, int timeout_ms);
+int wait_child(pid_t pid);
 
 int prepare_app_cache_dir(const std::string& parent, const char* name, mode_t target_mode,
         uid_t uid, gid_t gid);
@@ -184,10 +183,6 @@ bool collect_profiles(std::vector<std::string>* profiles_paths);
 
 void drop_capabilities(uid_t uid);
 
-// Removes a file specified by a file descriptor. Returns true on success. Reports the file path to
-// `path` if present.
-bool remove_file_at_fd(int fd, /*out*/ std::string* path = nullptr);
-
 }  // namespace installd
 }  // namespace android
 
diff --git a/cmds/installd/view_compiler.cpp b/cmds/installd/view_compiler.cpp
index 8c000a11c9..60d6492e70 100644
--- a/cmds/installd/view_compiler.cpp
+++ b/cmds/installd/view_compiler.cpp
@@ -33,13 +33,7 @@
 namespace android {
 namespace installd {
 
-namespace {
-
-using ::android::base::unique_fd;
-
-constexpr int kTimeoutMs = 300000;
-
-} // namespace
+using base::unique_fd;
 
 bool view_compiler(const char* apk_path, const char* package_name, const char* out_dex_file,
                    int uid) {
@@ -94,17 +88,7 @@ bool view_compiler(const char* apk_path, const char* package_name, const char* o
         _exit(1);
     }
 
-    int return_code = wait_child_with_timeout(pid, kTimeoutMs);
-    if (!WIFEXITED(return_code)) {
-        LOG(WARNING) << "viewcompiler failed for " << package_name << ":" << apk_path;
-        if (WTERMSIG(return_code) == SIGKILL) {
-            // If the subprocess is killed while it's writing to the file, the file is likely
-            // corrupted, so we should remove it.
-            remove_file_at_fd(outfd.get());
-        }
-        return false;
-    }
-    return WEXITSTATUS(return_code) == 0;
+    return wait_child(pid) == 0;
 }
 
 } // namespace installd
-- 
2.37.2

