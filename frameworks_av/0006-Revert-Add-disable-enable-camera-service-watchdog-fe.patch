From 90f4bd10855eb0fe05ef76a8aa97b96665bcfede Mon Sep 17 00:00:00 2001
From: z3DD3r <z3dd3r@gmail.com>
Date: Fri, 9 Dec 2022 22:53:49 +0300
Subject: [PATCH 06/34] Revert "Add disable/enable camera service watchdog
 feature"

This reverts commit 74cd373d6a9d5539ea9856b50f1c316ddc580d78.
---
 services/camera/libcameraservice/CameraService.cpp | 27 -----------
 services/camera/libcameraservice/CameraService.h   |  9 ----
 .../libcameraservice/CameraServiceWatchdog.cpp     | 11 -----
 .../libcameraservice/CameraServiceWatchdog.h       | 53 ++++++----------------
 .../camera/libcameraservice/api1/Camera2Client.cpp |  4 --
 .../camera/libcameraservice/api1/Camera2Client.h   |  2 -
 .../libcameraservice/api2/CameraDeviceClient.cpp   |  4 --
 .../libcameraservice/api2/CameraDeviceClient.h     |  2 -
 .../api2/CameraOfflineSessionClient.cpp            |  4 --
 .../api2/CameraOfflineSessionClient.h              |  2 -
 .../libcameraservice/common/CameraDeviceBase.h     |  5 --
 .../libcameraservice/device3/Camera3Device.cpp     | 24 ++--------
 .../libcameraservice/device3/Camera3Device.h       |  5 --
 13 files changed, 18 insertions(+), 134 deletions(-)

diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index a78112d..e31cf74 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -1955,9 +1955,6 @@ Status CameraService::connectHelper(const sp<CALLBACK>& cameraCb, const String8&
             }
         }
 
-        // Enable/disable camera service watchdog
-        client->setCameraServiceWatchdog(mCameraServiceWatchdogEnabled);
-
         // Set rotate-and-crop override behavior
         if (mOverrideRotateAndCropMode != ANDROID_SCALER_ROTATE_AND_CROP_AUTO) {
             client->setRotateAndCropOverride(mOverrideRotateAndCropMode);
@@ -4868,8 +4865,6 @@ status_t CameraService::shellCommand(int in, int out, int err, const Vector<Stri
         return handleSetCameraMute(args);
     } else if (args.size() >= 2 && args[0] == String16("watch")) {
         return handleWatchCommand(args, in, out);
-    } else if (args.size() >= 2 && args[0] == String16("set-watchdog")) {
-        return handleSetCameraServiceWatchdog(args);
     } else if (args.size() == 1 && args[0] == String16("help")) {
         printHelp(out);
         return OK;
@@ -4963,28 +4958,6 @@ status_t CameraService::handleSetRotateAndCrop(const Vector<String16>& args) {
     return OK;
 }
 
-status_t CameraService::handleSetCameraServiceWatchdog(const Vector<String16>& args) {
-    int enableWatchdog = atoi(String8(args[1]));
-
-    if (enableWatchdog < 0 || enableWatchdog > 1) return BAD_VALUE;
-
-    Mutex::Autolock lock(mServiceLock);
-
-    mCameraServiceWatchdogEnabled = enableWatchdog;
-
-    const auto clients = mActiveClientManager.getAll();
-    for (auto& current : clients) {
-        if (current != nullptr) {
-            const auto basicClient = current->getValue();
-            if (basicClient.get() != nullptr) {
-                basicClient->setCameraServiceWatchdog(enableWatchdog);
-            }
-        }
-    }
-
-    return OK;
-}
-
 status_t CameraService::handleGetRotateAndCrop(int out) {
     Mutex::Autolock lock(mServiceLock);
 
diff --git a/services/camera/libcameraservice/CameraService.h b/services/camera/libcameraservice/CameraService.h
index f2d15ef..28c5927 100644
--- a/services/camera/libcameraservice/CameraService.h
+++ b/services/camera/libcameraservice/CameraService.h
@@ -339,9 +339,6 @@ public:
         // Set/reset camera mute
         virtual status_t setCameraMute(bool enabled) = 0;
 
-        // Set Camera service watchdog
-        virtual status_t setCameraServiceWatchdog(bool enabled) = 0;
-
         // The injection camera session to replace the internal camera
         // session.
         virtual status_t injectCamera(const String8& injectedCamId,
@@ -1210,9 +1207,6 @@ private:
     // Handle 'watch' command as passed through 'cmd'
     status_t handleWatchCommand(const Vector<String16> &args, int inFd, int outFd);
 
-    // Set the camera service watchdog
-    status_t handleSetCameraServiceWatchdog(const Vector<String16>& args);
-
     // Enable tag monitoring of the given tags in provided clients
     status_t startWatchingTags(const Vector<String16> &args, int outFd);
 
@@ -1299,9 +1293,6 @@ private:
     // Current camera mute mode
     bool mOverrideCameraMuteMode = false;
 
-    // Camera Service watchdog flag
-    bool mCameraServiceWatchdogEnabled = true;
-
     /**
      * A listener class that implements the IBinder::DeathRecipient interface
      * for use to call back the error state injected by the external camera, and
diff --git a/services/camera/libcameraservice/CameraServiceWatchdog.cpp b/services/camera/libcameraservice/CameraServiceWatchdog.cpp
index e101dd3..a169667 100644
--- a/services/camera/libcameraservice/CameraServiceWatchdog.cpp
+++ b/services/camera/libcameraservice/CameraServiceWatchdog.cpp
@@ -66,17 +66,6 @@ void CameraServiceWatchdog::requestExit()
     }
 }
 
-void CameraServiceWatchdog::setEnabled(bool enable)
-{
-    AutoMutex _l(mEnabledLock);
-
-    if (enable) {
-        mEnabled = true;
-    } else {
-        mEnabled = false;
-    }
-}
-
 void CameraServiceWatchdog::stop(uint32_t tid)
 {
     AutoMutex _l(mWatchdogLock);
diff --git a/services/camera/libcameraservice/CameraServiceWatchdog.h b/services/camera/libcameraservice/CameraServiceWatchdog.h
index e35d69e..29ddab1 100644
--- a/services/camera/libcameraservice/CameraServiceWatchdog.h
+++ b/services/camera/libcameraservice/CameraServiceWatchdog.h
@@ -21,12 +21,10 @@
  * expected duration has exceeded.
  * Notes on multi-threaded behaviors:
  *    - The threadloop is blocked/paused when there are no calls being
- *   monitored (when the TID cycle to counter map is empty).
+ *   monitored.
  *   - The start and stop functions handle simultaneous call monitoring
  *   and single call monitoring differently. See function documentation for
  *   more details.
- * To disable/enable:
- *   - adb shell cmd media.camera set-cameraservice-watchdog [0/1]
  */
 #pragma once
 #include <chrono>
@@ -51,19 +49,15 @@ class CameraServiceWatchdog : public Thread {
 
 public:
     explicit CameraServiceWatchdog() : mPause(true), mMaxCycles(kMaxCycles),
-            mCycleLengthMs(kCycleLengthMs), mEnabled(true) {};
+            mCycleLengthMs(kCycleLengthMs) {};
 
-    explicit CameraServiceWatchdog (size_t maxCycles, uint32_t cycleLengthMs, bool enabled) :
-            mPause(true), mMaxCycles(maxCycles), mCycleLengthMs(cycleLengthMs), mEnabled(enabled)
-                    {};
+    explicit CameraServiceWatchdog (size_t maxCycles, uint32_t cycleLengthMs) :
+            mPause(true), mMaxCycles(maxCycles), mCycleLengthMs(cycleLengthMs) {};
 
     virtual ~CameraServiceWatchdog() {};
 
     virtual void requestExit();
 
-    /** Enables/disables the watchdog */
-    void setEnabled(bool enable);
-
     /** Used to wrap monitored calls in start and stop functions using custom timer values */
     template<typename T>
     auto watchThread(T func, uint32_t tid, uint32_t cycles, uint32_t cycleLength) {
@@ -72,20 +66,9 @@ public:
         if (cycles != mMaxCycles || cycleLength != mCycleLengthMs) {
             // Create another instance of the watchdog to prevent disruption
             // of timer for current monitored calls
-
-            // Lock for mEnabled
-            mEnabledLock.lock();
             sp<CameraServiceWatchdog> tempWatchdog =
-                    new CameraServiceWatchdog(cycles, cycleLength, mEnabled);
-            mEnabledLock.unlock();
-
-            status_t status = tempWatchdog->run("CameraServiceWatchdog");
-            if (status != OK) {
-                ALOGE("Unable to watch thread: %s (%d)", strerror(-status), status);
-                res = watchThread(func, tid);
-                return res;
-            }
-
+                    new CameraServiceWatchdog(cycles, cycleLength);
+            tempWatchdog->run("CameraServiceWatchdog");
             res = tempWatchdog->watchThread(func, tid);
             tempWatchdog->requestExit();
             tempWatchdog.clear();
@@ -101,16 +84,10 @@ public:
     /** Used to wrap monitored calls in start and stop functions using class timer values */
     template<typename T>
     auto watchThread(T func, uint32_t tid) {
-        decltype(func()) res;
-        AutoMutex _l(mEnabledLock);
 
-        if (mEnabled) {
-            start(tid);
-            res = func();
-            stop(tid);
-        } else {
-            res = func();
-        }
+        start(tid);
+        auto res = func();
+        stop(tid);
 
         return res;
     }
@@ -131,13 +108,11 @@ private:
 
     virtual bool    threadLoop();
 
-    Mutex           mWatchdogLock;      // Lock for condition variable
-    Mutex           mEnabledLock;       // Lock for enabled status
-    Condition       mWatchdogCondition; // Condition variable for stop/start
-    bool            mPause;             // True if tid map is empty
-    uint32_t        mMaxCycles;         // Max cycles
-    uint32_t        mCycleLengthMs;     // Length of time elapsed per cycle
-    bool            mEnabled;           // True if watchdog is enabled
+    Mutex           mWatchdogLock;        // Lock for condition variable
+    Condition       mWatchdogCondition;   // Condition variable for stop/start
+    bool            mPause;               // True if thread is currently paused
+    uint32_t        mMaxCycles;           // Max cycles
+    uint32_t        mCycleLengthMs;       // Length of time elapsed per cycle
 
     std::unordered_map<uint32_t, uint32_t> tidToCycleCounterMap; // Thread Id to cycle counter map
 };
diff --git a/services/camera/libcameraservice/api1/Camera2Client.cpp b/services/camera/libcameraservice/api1/Camera2Client.cpp
index 20bf73d..68dc7f8 100644
--- a/services/camera/libcameraservice/api1/Camera2Client.cpp
+++ b/services/camera/libcameraservice/api1/Camera2Client.cpp
@@ -2316,10 +2316,6 @@ int32_t Camera2Client::getGlobalAudioRestriction() {
     return INVALID_OPERATION;
 }
 
-status_t Camera2Client::setCameraServiceWatchdog(bool enabled) {
-    return mDevice->setCameraServiceWatchdog(enabled);
-}
-
 status_t Camera2Client::setRotateAndCropOverride(uint8_t rotateAndCrop) {
     if (rotateAndCrop > ANDROID_SCALER_ROTATE_AND_CROP_AUTO) return BAD_VALUE;
 
diff --git a/services/camera/libcameraservice/api1/Camera2Client.h b/services/camera/libcameraservice/api1/Camera2Client.h
index 8081efa..c8dfc46 100644
--- a/services/camera/libcameraservice/api1/Camera2Client.h
+++ b/services/camera/libcameraservice/api1/Camera2Client.h
@@ -90,8 +90,6 @@ public:
     virtual bool            supportsCameraMute();
     virtual status_t        setCameraMute(bool enabled);
 
-    virtual status_t        setCameraServiceWatchdog(bool enabled);
-
     /**
      * Interface used by CameraService
      */
diff --git a/services/camera/libcameraservice/api2/CameraDeviceClient.cpp b/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
index 15df981..5e91501 100644
--- a/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
+++ b/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
@@ -1730,10 +1730,6 @@ binder::Status CameraDeviceClient::getGlobalAudioRestriction(/*out*/ int32_t* ou
     return binder::Status::ok();
 }
 
-status_t CameraDeviceClient::setCameraServiceWatchdog(bool enabled) {
-    return mDevice->setCameraServiceWatchdog(enabled);
-}
-
 status_t CameraDeviceClient::setRotateAndCropOverride(uint8_t rotateAndCrop) {
     if (rotateAndCrop > ANDROID_SCALER_ROTATE_AND_CROP_AUTO) return BAD_VALUE;
 
diff --git a/services/camera/libcameraservice/api2/CameraDeviceClient.h b/services/camera/libcameraservice/api2/CameraDeviceClient.h
index 45915ba..c5aad6b 100644
--- a/services/camera/libcameraservice/api2/CameraDeviceClient.h
+++ b/services/camera/libcameraservice/api2/CameraDeviceClient.h
@@ -206,8 +206,6 @@ public:
     virtual status_t      stopWatchingTags(int out);
     virtual status_t      dumpWatchedEventsToVector(std::vector<std::string> &out);
 
-    virtual status_t      setCameraServiceWatchdog(bool enabled);
-
     /**
      * Device listener interface
      */
diff --git a/services/camera/libcameraservice/api2/CameraOfflineSessionClient.cpp b/services/camera/libcameraservice/api2/CameraOfflineSessionClient.cpp
index beb655b..9303fd2 100644
--- a/services/camera/libcameraservice/api2/CameraOfflineSessionClient.cpp
+++ b/services/camera/libcameraservice/api2/CameraOfflineSessionClient.cpp
@@ -66,10 +66,6 @@ status_t CameraOfflineSessionClient::initialize(sp<CameraProviderManager>, const
     return OK;
 }
 
-status_t CameraOfflineSessionClient::setCameraServiceWatchdog(bool) {
-    return OK;
-}
-
 status_t CameraOfflineSessionClient::setRotateAndCropOverride(uint8_t /*rotateAndCrop*/) {
     // Since we're not submitting more capture requests, changes to rotateAndCrop override
     // make no difference.
diff --git a/services/camera/libcameraservice/api2/CameraOfflineSessionClient.h b/services/camera/libcameraservice/api2/CameraOfflineSessionClient.h
index 9ea1093..f2c42d8 100644
--- a/services/camera/libcameraservice/api2/CameraOfflineSessionClient.h
+++ b/services/camera/libcameraservice/api2/CameraOfflineSessionClient.h
@@ -84,8 +84,6 @@ public:
     bool supportsCameraMute() override;
     status_t setCameraMute(bool enabled) override;
 
-    status_t setCameraServiceWatchdog(bool enabled) override;
-
     // permissions management
     status_t startCameraOps() override;
     status_t finishCameraOps() override;
diff --git a/services/camera/libcameraservice/common/CameraDeviceBase.h b/services/camera/libcameraservice/common/CameraDeviceBase.h
index 69514f3..7e2f93c 100644
--- a/services/camera/libcameraservice/common/CameraDeviceBase.h
+++ b/services/camera/libcameraservice/common/CameraDeviceBase.h
@@ -449,11 +449,6 @@ class CameraDeviceBase : public virtual FrameProducer {
     virtual status_t setCameraMute(bool enabled) = 0;
 
     /**
-     * Enable/disable camera service watchdog
-     */
-    virtual status_t setCameraServiceWatchdog(bool enabled) = 0;
-
-    /**
      * Get the status tracker of the camera device
      */
     virtual wp<camera3::StatusTracker> getStatusTracker() = 0;
diff --git a/services/camera/libcameraservice/device3/Camera3Device.cpp b/services/camera/libcameraservice/device3/Camera3Device.cpp
index bf40cb1..727dd6c 100644
--- a/services/camera/libcameraservice/device3/Camera3Device.cpp
+++ b/services/camera/libcameraservice/device3/Camera3Device.cpp
@@ -113,6 +113,10 @@ const String8& Camera3Device::getId() const {
 
 status_t Camera3Device::initializeCommonLocked() {
 
+    /** Start watchdog thread */
+    mCameraServiceWatchdog = new CameraServiceWatchdog();
+    mCameraServiceWatchdog->run("CameraServiceWatchdog");
+
     /** Start up status tracker thread */
     mStatusTracker = new StatusTracker(this);
     status_t res = mStatusTracker->run(String8::format("C3Dev-%s-Status", mId.string()).string());
@@ -226,15 +230,6 @@ status_t Camera3Device::initializeCommonLocked() {
     // Hidl/AidlCamera3DeviceInjectionMethods
     mInjectionMethods = createCamera3DeviceInjectionMethods(this);
 
-    /** Start watchdog thread */
-    mCameraServiceWatchdog = new CameraServiceWatchdog();
-    res = mCameraServiceWatchdog->run("CameraServiceWatchdog");
-    if (res != OK) {
-        SET_ERR_L("Unable to start camera service watchdog thread: %s (%d)",
-                strerror(-res), res);
-        return res;
-    }
-
     return OK;
 }
 
@@ -4099,17 +4094,6 @@ void Camera3Device::RequestThread::cleanupPhysicalSettings(sp<CaptureRequest> re
     }
 }
 
-status_t Camera3Device::setCameraServiceWatchdog(bool enabled) {
-    Mutex::Autolock il(mInterfaceLock);
-    Mutex::Autolock l(mLock);
-
-    if (mCameraServiceWatchdog != NULL) {
-        mCameraServiceWatchdog->setEnabled(enabled);
-    }
-
-    return OK;
-}
-
 void Camera3Device::RequestThread::cleanUpFailedRequests(bool sendRequestError) {
     if (mNextRequests.empty()) {
         return;
diff --git a/services/camera/libcameraservice/device3/Camera3Device.h b/services/camera/libcameraservice/device3/Camera3Device.h
index 3c5cb78..f927b4d 100644
--- a/services/camera/libcameraservice/device3/Camera3Device.h
+++ b/services/camera/libcameraservice/device3/Camera3Device.h
@@ -281,11 +281,6 @@ class Camera3Device :
      */
     status_t setCameraMute(bool enabled);
 
-    /**
-     * Enables/disables camera service watchdog
-     */
-    status_t setCameraServiceWatchdog(bool enabled);
-
     // Get the status trackeer for the camera device
     wp<camera3::StatusTracker> getStatusTracker() { return mStatusTracker; }
 
-- 
2.7.4

